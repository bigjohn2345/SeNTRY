--framework declarations
http1 = require('coro-http')
local discordia = require('discordia')
local client = discordia.Client()
local vip = "216004345739608065" --making this a string then converting isnt necessary but i like it because redundancy IT ACTUALLY IS BWOAH
local Cmds = {}

--SETTINGS
--following is for keying ids to guilds
local gwl = {}
local iconvector = "https://upload.wikimedia.org/wikipedia/commons/3/30/Emojione_1F530.svg"


--following is corresponding log channels to guilds



--setup the functions i like
function wait(seconds) --wait time
  local start = os.time()
  repeat until os.time() > start + seconds
end

function string.startswith(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end

function toTable(...) --covert iterator to table, pass function that returns iterator
  local arr = {}
  for v in ... do
    arr[#arr + 1] = v
  end
  return arr
end

function respondError(channel,reason) --easy way to send errors in chat
	channel:send {
	embed = {
		title = "There were errors with completing your request",
		fields = {
		{name = "Error 1:", value = tostring(reason), inline = true},
		},
		color = discordia.Color.fromRGB(255,0,0).value,
		timestamp = discordia.Date():toISO('T', 'Z')
	}
	}
end

function chatLog(channel,type,action,optuser) --preformatted log messages, optuser optional
	channel:send {
	embed = {
		title = "Action occured: "..tostring(type),
		if optuser ~= nil then
			fields = {
				{name = "Details: ", value = tostring(action), inline = true},
				{name = "Responsible user: ", value = tostring(optuser), inline = true},
			},
		else
			fields = {
				{name = "Details:", value = tostring(action), inline = true},
			},
		end
		color = discordia.Color.fromRGB(255,168,38).value,
		timestamp = discordia.Date():toISO('T', 'Z')
	}
	}
end

--bot operation functions

function CheckCommands(cmd) --runs the arg through a TON of if statements
	if string.startswith(cmd.cleanContent,"//") then
		if cmd.cleanContent
	end
end

function AttachListener(msg) -idk do we really need to
	
end

--get deps ready for chat filter

local alphabet = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"}
local blocked_words = {"badword","fuck", "faggot", "shit", "cock", "fk", "fuk", "ass", "asswipe", "damn", "bastard", "dick", "dickk", "dickslap", "dicks", "dumass", "dumbass", "fag", "gayass", "gay", "homo", "ho", "whore", "mothafucka", "mothafuka", "motherfucker", "mofo", "ballsack", "nigga", "nigger", "pussy", "queerhole", "queer", "stfu", "testicle", "testicles", "testical", "testicles", "twat", "vagina", "wank"}
 
function FilterMessage(message)
        if message then
                local words = tokenizestring(message, " ")
                local filter = ""
                local filter1 = ""
                if #words == 0 then
                        return nil
                end
                for i = 0, #words do
                        if words[i] then
                                for x = 1,#blocked_words do
                                        if string.find(words[i], blocked_words[x]) then
						doLog(message,3)
						message:delete()
                                        end
                                end
                        end
                end
                for i = 0,#words do
                        if words[i] then
                                local word = string.lower(words[i])
                                if filter == "" then
                                        filter = word
                                else
                                        filter = filter .. "" .. word
                                end
                        end
                end
                filter = ""
                for t=1,string.len(filter1) do
                        local holdLetter = string.sub(filter1, t ,t)
                        for k =1,#alphabet do
                                if holdLetter == alphabet[k] then
                                        filter = filter .. "" .. holdLetter
                                end
                        end
                end
                filter1 = removerepeaters(filter)
                for x = 1,#blocked_words do
                        if string.find(filter1, blocked_words[x]) then
				doLog(message,3)
                                message:delete()
                        end
                end
        end
        return nil
end
 


function removerepeaters(word)
        local holdLetter = ""
        local filter = ""
        for i=1,string.len(word) do
                local holdLetter1 = string.sub(word, i ,i)
                if holdLetter1 ~= holdLetter then
                        filter = filter .. "" .. holdLetter1
                end
                holdLetter = holdLetter1
        end
        return filter
end





----------------------------------

function doLog(message,type)
	local place = message.guild.id
		if type == 1 then --message delete by user
			
		elseif type == 2 then --message edited anywhere
			
		elseif type == 3 then --message deleted by filters
			
		elseif type == nil then --fallbacks
			print("Failed to get type-not logged")
		else
			print("Invalid log type")
		end
	end
end

--subscribe to events we want

client:on('ready', function()
--[[ (DISABLED BECAUSE ODD RATELIMITS)
	local gamewheel = coroutine.create(function() --make the coroutine here so it cant complain about no client, maybe fixed in 2.0 but not risking it
		while true do
			client:setGame("SeNTRY 2.1A")
			wait(5)
			client:setGame("Status: OK")
			wait(5)
			client:setGame("by bigjohn2345")
			wait(5)
		end
	end) ]]--
	--coroutine.resume(gamewheel) --DISABLED
--end mothballed init code
	print('success Logged in as '.. client.user.username)
	client:setGame("Sentry 2.3A")

end)

client:on('messageCreate', function(message) --do message stuff, 
	if tostring(message.author.id) == tostring(client.user.id) then print("Message by bot-ignoring")
	if string.startswith(tostring(message.content),"//") == true then
		CheckCommands(cmd)
	end
	FilterMessage(message) --filter last as to not filter commands FORWARD THINKING
end)

client:on('messageDelete', function(message) --log message deletions in the appropriate place
	local place = message.Guild
	doLog(message,1)
end)

client:on('messageUpdate', function(message) --log edited messages
	doLog(message,2)
end)

--set up the client itself so i can use it, keep last
--fix this later needs a token
client:run("Bot [INSERT TOKEN HERE SOMEHOW]")



