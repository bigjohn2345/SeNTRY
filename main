--framework declarations
http1 = require('coro-http')
local discordia = require('discordia')
local client = discordia.Client()
local vip = "216004345739608065" --making this a string then converting isnt necessary but i like it because redundancy IT ACTUALLY IS BWOAH
local Cmds = {}

--SETTINGS
--following is for keying ids to guilds
local gwl = {}
local iconvector = "https://upload.wikimedia.org/wikipedia/commons/3/30/Emojione_1F530.svg"


--following is corresponding log channels to guilds



--setup the functions i like
function wait(seconds) --wait time
  local start = os.time()
  repeat until os.time() > start + seconds
end

function string.startswith(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end

function toTable(...) --covert iterator to table, pass function that returns iterator
  local arr = {}
  for v in ... do
    arr[#arr + 1] = v
  end
  return arr
end

function respondError(channel,reason) --easy way to send errors in chat
	channel:send {
	embed = {
		title = "There were errors with completing your request",
		fields = {
		{name = "Error 1:", value = tostring(reason), inline = true},
		},
		color = discordia.Color.fromRGB(255,0,0).value,
		timestamp = discordia.Date():toISO('T', 'Z')
	}
	}
end

function chatLog(channel,type,action,optuser) --preformatted log messages, optuser optional
	channel:send {
	embed = {
		title = "Action occured: "..tostring(type),
		if optuser ~= nil then
			fields = {
				{name = "Details: ", value = tostring(action), inline = true},
				{name = "Responsible user: ", value = tostring(optuser), inline = true},
			},
		else
			fields = {
				{name = "Details:", value = tostring(action), inline = true},
			},
		end
		color = discordia.Color.fromRGB(255,168,38).value,
		timestamp = discordia.Date():toISO('T', 'Z')
	}
	}
end

--bot operation functions

function CheckCommands(cmd) --runs the arg through a TON of if statements
	if string.startswith(cmd.cleanContent,"//") then
		if cmd.cleanContent
	end
end

function AttachListener(msg) -idk do we really need to
	
end

-------------------------------

function FilterMessage(message) --text filter suite, by AelitePrime at phasorscripts.wordpress.com
	--[[
        Creator: AelitePrime
        Script Name: Chat Filter Script
        Website: http://phasorscripts.wordpress.com/
        Xfire: eliteprime14789x
        Version: 4.0
       
        Reason for Update:
                - Phasor Update
               
       
        Features:      
        -- Removes spaces from the words. Example: it will star out “w o r d”, because it removes the spaces and makes it “word”.
        It will also remove character that is not in the alphabet. Example: “w$o$r#d” will be converted to “word”.
         
        -- The words we want to block go here. Make sure they are all LOWER CASE!!
 
        -- Removes repeated letters in a word. Example: "wooorrdddd" will be converted to "word".
 
        -- Commands have been added to the script so you can more easily manage the words being blocked in your server.
 
        Commands: sv_add_word, sv_del_word, sv_blockedwords, sv_reloadwordslist
 
        Syntax for the commands:
 
        sv_add_word [word]
        sv_del_word [word]
        sv_blockedwords
        sv_reloadwordslist
 
        -- Warning: Do not leave a blank in the words.txt (Ex: " "). This will cause all words to be blocked.
 
]]--
 
alphabet = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"}
blocked_words = {}
filename = "words.data"
 
function GetRequiredVersion()
        return 200
end
 
function OnScriptLoad(process, game, persistent)
        profilepath = getprofilepath()
        local file = io.open(string.format("%s\\data\\" .. filename, profilepath), "r")
        if file then
                for line in file:lines() do
                        if string.len(line) > 0 then
                                local word1 = line
                                local word = removerepeaters(line)
                                if word ~= word1 then
                                        table.insert(blocked_words, word)
                                end
                                table.insert(blocked_words, word1)
                        end
                end
        else
                registertimer(0, "wordtimer")
        end
end
 
function OnScriptUnload()
        local file = io.open(string.format("%s\\data\\" .. filename, profilepath), "w")
        if file then
                for i = 0,#blocked_words do
                        if blocked_words[i] then
                                local word1 = blocked_words[i]
                                local word = removerepeaters(blocked_words[i])
                                if word1 ~= word then
                                        file:write(word .. "\n")
                                end
                                file:write(word1 .. "\n")
                        end
                end
        end
        file:close()
end
 
function OnServerChat(player, type, message)
        if player then
                local words = tokenizestring(message, " ")
                local filter = ""
                local filter1 = ""
                if #words == 0 then
                        return nil
                end
                for i = 0, #words do
                        if words[i] then
                                for x = 1,#blocked_words do
                                        if string.find(words[i], blocked_words[x]) then
                                                if getplayer(player) then
                                                        privatesay(player, "Please do not curse")
                                                end
                                                return false
                                        end
                                end
                        end
                end
                for i = 0,#words do
                        if words[i] then
                                local word = string.lower(words[i])
                                if filter == "" then
                                        filter = word
                                else
                                        filter = filter .. "" .. word
                                end
                        end
                end
                filter = ""
                for t=1,string.len(filter1) do
                        local holdLetter = string.sub(filter1, t ,t)
                        for k =1,#alphabet do
                                if holdLetter == alphabet[k] then
                                        filter = filter .. "" .. holdLetter
                                end
                        end
                end
                filter1 = removerepeaters(filter)
                for x = 1,#blocked_words do
                        if string.find(filter1, blocked_words[x]) then
                                privatesay(player, "Please do not curse")
                                return false
                        end
                end
        end
        return nil
end
 
function OnServerCommand(player, command)
        local response = nil
        local t = tokenizecmdstring(command)
        local count = #t
        if t[1] == "sv_blockedwords" then
                response = false
                Command_BlockedWords(player, t[1], count)
        elseif t[1] == "sv_del_word" then
                response = false
                Command_DeleteWord(player, t[1], t[2], count)
        elseif t[1] == "sv_add_word" then
                response = false
                Command_AddWord(player, t[1], t[2], count)
        elseif t[1] == "sv_reloadwordslist" then
                response = false
                Command_ReloadWordsList(player, t[1], count)
        end
    return response
end
 
function wordtimer(id, count)
        local file = io.open(string.format("%s\\data\\" .. filename, profilepath), "w")
                hprintf(filename .. " not found. File will be created...")
                file:write("fuck\n")
                file:write("bitch\n")
                file:write("pusy\n")
                file:write("pussy\n")
                file:write("fagot\n")
                file:write("faggot\n")
                file:write("vagina\n")
                file:write("shit\n")
                file:write("cock\n")
                file:write("bastard\n")
                file:write("dumbas\n")
                file:write("dumbass\n")
                file:write("fag\n")
                file:write("gay\n")
                file:write("homo\n")
                file:write("whore\n")
                file:write("mothafucka\n")
                file:write("mothafuka\n")
                file:write("motherfucker\n")
                file:write("mofo\n")
                file:write("balsack\n")
                file:write("ballsack\n")
                file:write("niga\n")
                file:write("niger\n")
                file:write("nigger\n")
                file:write("querhole\n")
                file:write("queerhole\n")
                file:write("testicle\n")
                file:write("testical\n")
                file:write("twat\n")
                file:write("wank\n")
                file:close()
                local file = io.open(string.format("%s\\data\\" .. filename, profilepath), "r")
                for line in file:lines() do
                        if string.len(line) > 0 then
                                table.insert(blocked_words, line)
                        end
                end    
                file:close()
        return false
end
 
function removerepeaters(word)
        local holdLetter = ""
        local filter = ""
        for i=1,string.len(word) do
                local holdLetter1 = string.sub(word, i ,i)
                if holdLetter1 ~= holdLetter then
                        filter = filter .. "" .. holdLetter1
                end
                holdLetter = holdLetter1
        end
        return filter
end
 
function Command_AddWord(executor, command, word, count)
        if count == 2 then
                local valid = true
                for i = 0,#blocked_words do
                        if word == blocked_words[i] then
                                valid = false
                                break
                        end
                end
                if valid then
                        table.insert(blocked_words, word)
                        sendresponse(word .. " has been added to the Blocked Words list", executor)
                else
                        sendresponse(word .. " is already on the Blocked Words list", executor)
                end
        else
                sendresponse("Invalid Syntax " .. command .. " [word]", executor)
        end    
end
 
function Command_BlockedWords(executor, command, count)
        if count == 1 then
                response = "Blocked Words List\n"
                local word1,word2,word3,word4
                for i = 0,#blocked_words do
                        if blocked_words[i] ~= nil then
                                if i%4 == 0 then
                                        response = response .. blocked_words[i]  .. "\n"
                                else
                                        response = response .. blocked_words[i]  .. " - "
                                end
                        end
                end
                sendresponse(response, executor)
        else
                sendresponse("Invalid Syntax: " .. command , executor)
        end
end
 
function Command_DeleteWord(executor, command, word, count)
        if count == 2 then
                local valid = false
                for i = 0,#blocked_words do
                        if word == blocked_words[i] then
                                valid = true
                                blocked_words[i] = nil
                                break
                        end
                end
                if valid then
                        sendresponse(word .. " has been deleted from the Blocked Words list", executor)
                else
                        sendresponse(word .. " is not in the Blocked Words list", executor)
                end
        else
                sendresponse("Invalid Syntax " ..  command .. " [word]", executor)
        end
end
 
function Command_ReloadWordsList(executor, command, count)
        if count == 1 then
                blocked_words = {}
                local file = io.open(string.format("%s\\data\\" .. filename, profilepath), "r")
                if file then
                        for line in file:lines() do
                                if string.len(line) > 0 then
                                        local word1 = line
                                        local word = removerepeaters(line)
                                        if word ~= word1 then
                                                table.insert(blocked_words, word)
                                        end
                                        table.insert(blocked_words, word1)
                                end
                        end
                end
                sendresponse("BlockedWords has been reloaded", executor)
        else
                sendresponse("Invalid Syntax " .. command, executor)
        end
end
 
function convertletter(word)
        if string.find(word, "1") or string.find(word, "!") then
                word = "i"
        end
        if string.find(word, "4") then
                word = "u"
        end
        if string.find(word, "3") then
                word = "e"
        end
        if string.find(word, "@") then
                word = "a"
        end
        if string.find(word, "<") then
                word = "c"
        end
        if string.find(word, "9") then
                word = "g"
        end
        if string.find(word, "0") then
                word = "o"
        end
        return word
end

----------------------------------------------------------------
 
function sendresponse(message, player)
        if message == "" then
                return
        end
        player = tonumber(player)
        if tonumber(player) and player ~= nil and player ~= -1 and player >= 0 and player < 16 then
                sendconsoletext(player, message)
        else
                hprintf(message)
        end
end
end

function doLog(message,type)
	local place = message.guild.id
		if type == 1 then
			
		elseif type == 2 then
			
		elseif type == nil then
			print("Failed to get type-not logged")
	end
end

--subscribe to events we want

client:on('ready', function()
--[[ (DISABLED BECAUSE ODD RATELIMITS)
	local gamewheel = coroutine.create(function() --make the coroutine here so it cant complain about no client, maybe fixed in 2.0 but not risking it
		while true do
			client:setGame("SeNTRY 2.1A")
			wait(5)
			client:setGame("Status: OK")
			wait(5)
			client:setGame("by bigjohn2345")
			wait(5)
		end
	end) ]]--
	--coroutine.resume(gamewheel) --DISABLED
--end mothballed init code
	print('success Logged in as '.. client.user.username)
	client:setGame("Sentry 2.3A")

end)

client:on('messageCreate', function(message) --do message stuff
	if tostring(message.author.id) == tostring(client.user.id) then print("Message by bot-ignoring")
	AttachListener(cmd)
	if string.startswith(tostring(message.content),"//") == true then
		CheckCommands(cmd)
	end
	FilterMessage(message) --filter last as to not filter commands FORWARD THINKING
end)

client:on('messageDelete', function(message) --log message deletions in the appropriate place
	local place = message.Guild
	doLog(message,1)
end)

client:on('messageUpdate', function(message) --log edited messages
	doLog(message,2)
end)

--set up the client itself so i can use it, keep last
--fix this later needs a token
client:run("Bot [INSERT TOKEN HERE SOMEHOW]")



